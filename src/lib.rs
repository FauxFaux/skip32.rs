//! SKIP32 is a 80-bit key, 32-bit block cipher based on SKIPJACK.
//!
//! It has the uncommon properties of being fast, creating very dissimilar encrypted values for
//! consecutive input values, and producing output of the same size as the input (32-bit). These
//! make this cipher particularly useful for obfuscating series of 32-bit integers (e.g.
//! auto-incremented database ids). It is not appropriate for general cryptography.
//!
//! [CPAN - Crypt::Skip32](http://search.cpan.org/%7Eesh/Crypt-Skip32-0.17/lib/Crypt/Skip32.pm)
//! has more information.
//!
//! A copy of the original source code that this is based on can be found in `skip32.c`.
//!
//! # Example
//!
//! ```
//! // keys are plain byte arrays
//! let key: &[u8; 10] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
//! // input and output blocks are u32
//! let encoded: u32 = skip32::encode(key, 1000);
//! // every input has a unique output
//! assert!(encoded == 2109307140);
//! let decoded = skip32::decode(key, encoded);
//! assert!(decoded == 1000);
//! ```

#![feature(negate_unsigned)]
#![cfg_attr(test, feature(test))]

/// Encode value
pub fn encode(key: &[u8; 10], x: u32) -> u32 {
    skip32(key, x, 0, 1)
}

/// Decode value
pub fn decode(key: &[u8; 10], x: u32) -> u32 {
    skip32(key, x, 23, -1)
}

const TABLE: [u8; 256] = [
    0xa3, 0xd7, 0x09, 0x83, 0xf8, 0x48, 0xf6, 0xf4, 0xb3, 0x21, 0x15, 0x78, 0x99, 0xb1, 0xaf, 0xf9,
    0xe7, 0x2d, 0x4d, 0x8a, 0xce, 0x4c, 0xca, 0x2e, 0x52, 0x95, 0xd9, 0x1e, 0x4e, 0x38, 0x44, 0x28,
    0x0a, 0xdf, 0x02, 0xa0, 0x17, 0xf1, 0x60, 0x68, 0x12, 0xb7, 0x7a, 0xc3, 0xe9, 0xfa, 0x3d, 0x53,
    0x96, 0x84, 0x6b, 0xba, 0xf2, 0x63, 0x9a, 0x19, 0x7c, 0xae, 0xe5, 0xf5, 0xf7, 0x16, 0x6a, 0xa2,
    0x39, 0xb6, 0x7b, 0x0f, 0xc1, 0x93, 0x81, 0x1b, 0xee, 0xb4, 0x1a, 0xea, 0xd0, 0x91, 0x2f, 0xb8,
    0x55, 0xb9, 0xda, 0x85, 0x3f, 0x41, 0xbf, 0xe0, 0x5a, 0x58, 0x80, 0x5f, 0x66, 0x0b, 0xd8, 0x90,
    0x35, 0xd5, 0xc0, 0xa7, 0x33, 0x06, 0x65, 0x69, 0x45, 0x00, 0x94, 0x56, 0x6d, 0x98, 0x9b, 0x76,
    0x97, 0xfc, 0xb2, 0xc2, 0xb0, 0xfe, 0xdb, 0x20, 0xe1, 0xeb, 0xd6, 0xe4, 0xdd, 0x47, 0x4a, 0x1d,
    0x42, 0xed, 0x9e, 0x6e, 0x49, 0x3c, 0xcd, 0x43, 0x27, 0xd2, 0x07, 0xd4, 0xde, 0xc7, 0x67, 0x18,
    0x89, 0xcb, 0x30, 0x1f, 0x8d, 0xc6, 0x8f, 0xaa, 0xc8, 0x74, 0xdc, 0xc9, 0x5d, 0x5c, 0x31, 0xa4,
    0x70, 0x88, 0x61, 0x2c, 0x9f, 0x0d, 0x2b, 0x87, 0x50, 0x82, 0x54, 0x64, 0x26, 0x7d, 0x03, 0x40,
    0x34, 0x4b, 0x1c, 0x73, 0xd1, 0xc4, 0xfd, 0x3b, 0xcc, 0xfb, 0x7f, 0xab, 0xe6, 0x3e, 0x5b, 0xa5,
    0xad, 0x04, 0x23, 0x9c, 0x14, 0x51, 0x22, 0xf0, 0x29, 0x79, 0x71, 0x7e, 0xff, 0x8c, 0x0e, 0xe2,
    0x0c, 0xef, 0xbc, 0x72, 0x75, 0x6f, 0x37, 0xa1, 0xec, 0xd3, 0x8e, 0x62, 0x8b, 0x86, 0x10, 0xe8,
    0x08, 0x77, 0x11, 0xbe, 0x92, 0x4f, 0x24, 0xc5, 0x32, 0x36, 0x9d, 0xcf, 0xf3, 0xa6, 0xbb, 0xac,
    0x5e, 0x6c, 0xa9, 0x13, 0x57, 0x25, 0xb5, 0xe3, 0xbd, 0xa8, 0x3a, 0x01, 0x05, 0x59, 0x2a, 0x46,
];

#[inline(always)]
fn g(key: &[u8; 10], w: u16, k: usize) -> u16 {
    let g1: u8 = (w>>8) as u8;
    let g2: u8 = w as u8;
    let g3: u8 = TABLE[(g2^key[(4*k+0)%10]) as usize]^g1;
    let g4: u8 = TABLE[(g3^key[(4*k+1)%10]) as usize]^g2;
    let g5: u8 = TABLE[(g4^key[(4*k+2)%10]) as usize]^g3;
    let g6: u8 = TABLE[(g5^key[(4*k+3)%10]) as usize]^g4;
    (g5 as u16)<<8 | g6 as u16
}

#[inline]
fn skip32(key: &[u8; 10], x: u32, mut k: usize, kstep: usize) -> u32 {
    // Unpack
    let mut wl = (x>>16) as u16;
    let mut wr = x as u16;

    for _ in 0..12 {
        wr ^= g(key, wl, k)^(k as u16);
        k = k.wrapping_add(kstep);
        wl ^= g(key, wr, k)^(k as u16);
        k = k.wrapping_add(kstep);
    }

    // Swap halves
    (wr as u32)<<16 | wl as u32
}

#[cfg(test)]
mod test {
    extern crate quickcheck;
    extern crate test;

    // #[test]
    // fn all() {
    //     use std::iter::range_inclusive;
    //     for i in range_inclusive(0, !0) {
    //         assert!(i == ::decode(KEY, ::encode(KEY, i)));
    //     }
    // }

    use self::quickcheck::quickcheck;
    use self::test::{Bencher, black_box};

    const KEY: &'static [u8; 10] = &[0,0,0,0,0,0,0,0,0,0];

    #[bench]
    fn bench_encode(b: &mut Bencher) {
        b.iter(|| ::encode(KEY, black_box(0)))
    }

    #[bench]
    fn bench_decode(b: &mut Bencher) {
        b.iter(|| ::decode(KEY, black_box(0)))
    }

    static KEYS: &'static [&'static [u8; 10]] = &[
        b"\x42\x08\x81\xdf\xbe\xcf\x2f\x33\xb3\xdd",
        b"\x28\xf2\x4e\x89\x63\x92\x29\xdd\xfe\x74",
        b"\x0a\x12\x1d\xd0\xe8\xab\x95\x7d\xef\x30",
        b"\x25\xe7\xb3\xa9\xc2\x6a\xac\x7e\x53\x61",
        b"\x1c\xc3\xaa\x06\x96\x12\xea\x38\xb5\x63",
    ];

    static VALUES: &'static [&'static [u32]] = &[
        &[0xba355ec9, 0xe0aab6ae, 0x850e1981, 0x3ef83325, 0x0a108f99, 0x97dfefb7, 0xb81882ec, 0x5a53eaad, 0x61697bc0, 0xcf66b16e],
        &[0x6b80e903, 0x1bc0e577, 0xb69e01cc, 0x28b0b730, 0x47fa1c70, 0x379a58b6, 0xd73da509, 0x67cb0fb2, 0x9da8aff9, 0x8fef8355],
        &[0x0cec9cf5, 0xc61c4549, 0xf0dc5ac7, 0x6f44d1dc, 0x9a40acd5, 0xfb469310, 0x53d99581, 0x7ad1419a, 0x09ddff92, 0x4eae4647],
        &[0xed16526a, 0x5006a750, 0x199e76e7, 0x1a37277f, 0x5271f6b1, 0xd8b946e7, 0x3e740dbd, 0x5c88b02d, 0xd9f72db9, 0x406eabac],
        &[0xd53199a6, 0x3f23a58a, 0x7800f978, 0x96294d9f, 0xe02c93c1, 0x33cc4407, 0xd6433128, 0x56839fe9, 0x993864e9, 0xcde7a768],
    ];

    #[test]
    fn predef() {
        for x in 0..5 {
            for y in 0..10 {
                assert!(::encode(KEYS[x], KEYS[x][y] as u32) == VALUES[x][y])
            }
        }
    }

    #[bench]
    fn bench_predef(b: &mut Bencher) {
        b.iter(|| predef());
    }

    #[test]
    fn prop_id() {
        // decode(key, encode(key, x)) == x
        fn prop(x: u32) -> bool {
            ::decode(KEY, ::encode(KEY, x)) == x
        }
        quickcheck(prop as fn(u32) -> bool);
    }
}
